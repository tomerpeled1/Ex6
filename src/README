tomerpeled
dviramar


=============================
=      File description     =
=============================
This excercise checks if sjava fils are able to compile.
the classes are all in package main.
under the main package:
    FunctionWrapper.java -  his class represents a function (not a function decleration block!) - it holds
        the parameters it should get(types and names),and the name of the function..
    IllegalLineException.java -an exception that is thrown where an error in a line happens.
    Regex.java -  this class holds all the Patterns the program is using.
    Sjavac.java -  the main class. it gets a sjava file name and checks if the file will be able to compile.
    VariableWrapper.java - this class represents a variable of the program checked.


under package Blocks, which holds all the objects connected to scopes:
    CodeBlock -  this abstract class represents a single block, scope of code - a global scope,
        function or if/while scope.
    BooleanExpressionBlock.java - this class represents a block of if/while statement.
    FunctionDefBlock.java -  this class represents a scope of a function.
    MasterBlock.java - this class represents the global scope of the sjava file.
    SubBlock.java - this abstract class represents a block which is not the main block
        - a function decleretion of if/while block.

=============================
=          Design           =
=============================

we thought a long time for a proper design for this excersice. we firstly decided on a design, then wrote
a skeleton for the flow of the program, and then implemented to details. At first, we saw that it is obvious
we need to run on each scope with it's parameters, so we decided to make object of Blocks,
then we thought that we handle differently global and local variables so we created a class of masterBlock and
one of subBlock.

The information about variables is kept in a seperated object. it holds it's type as an enum instance,
so if we will want to add another type like float we can simply add it to the enum.

As for functions - this was a little bit more tricky. we considered having a Function object, but ruled it:
we understood that there are two different types of lines containing functions handling - decleration and
usage. when declaring a function we create a FunctionWrapper object which holds the parameters types, names
and function's name. then, we want to see if the decleration is valid, so we use a FunctionDefBlock
which extends CodeBlock. this FunctionDefBlock "Has a" FunctionWrapper which holds the inforamtion on the
relevant parameters legal specificly those it gets from the user. In addition, when we call a function
later in the code, we need to check only the FunctionWrapper that holds detalis about the
legalicy of the call. This is the main reason we chose to use the wrapper.

The check for wxistane of variable and functions is done recursively - we hold a list of data members of each scope,
and if we can't find a data member we look for it in the parent's list, until we get to the master.
an alternative to this is to get in the constructor of a block the data members of it's parent's lists' and
to keep all data in the scope itslef. We chose recursion because it is redundent to keep the
data members several times,it wastes memory, and we think recursion can solve this problem.

The patterns of regexes need to compile only once, so we made a class holds all the patterns
as static data members.
Another thing that was fun to realize, and we changed the design in the procecs, is that we don't need
to keep the data a variable holds, but only if it has a value, which made a lot of thing easier.


=============================
=  Implementation details   =
=============================


=============================
=    Answers to questions   =
=============================
1. Exceptions -

the way we chose to handle errors in the sjava files is to throw an exception when seeing an error.
the exception is thrown with a massege to print which contains the line number. we do so because
this way we can be very specific about the errors, and because the exception mechanism lets us
handle an error and simply throw an exception and cut the check. the exceptions are thrown upwards,
and the main of Javac catches them and prints "1" and the message.

2. Design -
the design is explained to details in DESIGN section.

handling more variable types - as explained before, if we want to add another type we simply add it to
the enum defining the types.

extra features -
a. methods of java - our program initializes the list of functions as an empty list. if we will have built-in
methods, we will hold a list of them as FunctionWrappers and every time we see a call to a function we will
check in addition to the functions the program declares, in the list of built-ins.
b. Inheritage of files - exactly like we check for existence of data members recursivly until
we get to the main scope, we will keep searching for functions in the parent scope that we will keep as
another data member of the master scope. We will do that until we get to a scope that does not inherit
from any other file, aka has a parentScope equals to null.

3. Regular Expressions -
two main regexes we used:
a. a regex that checks if a line is a proper decleration on function. it checks if a line starts with void,
then a legal name of funtion, the brackents with types, names and commas, and then that the line
ends with ";". We want to state that we are very proud of this regex, and that it is 3 lines long :).
b. a regex that is used to split boolean expressions - a solution to existance of "&&" and "||", this
regex is used in split() method and then we can check the expression as combination of some smaller ones.
c. a regex that checks if a line is if of while line (two different regexes). very similar to (a),
but shorter.



